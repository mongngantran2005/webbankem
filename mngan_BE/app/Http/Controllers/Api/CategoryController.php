<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Category;
use App\Models\Brand;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Storage; // üëà TH√äM D√íNG N√ÄY
use Illuminate\Support\Str; // üëà TH√äM D√íNG N√ÄY
use Illuminate\Support\Facades\Auth; // üëà TH√äM D√íNG N√ÄY


class CategoryController extends Controller
{
    // ==================== USER ROUTES ====================
   public function index()
{
    $categories = Category::with(['parent', 'children'])
        ->where('status', 1)
        ->orderBy('sort_order', 'ASC')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $categories
    ]);
}


    public function show($id)
{
    $category = Category::find($id);

    if (!$category) {
        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
        ], 404);
    }

    // ‚úÖ Th√™m ƒëo·∫°n n√†y ƒë·ªÉ c√≥ URL ƒë·∫ßy ƒë·ªß
    $category->image = $category->image
        ? url('storage/' . $category->image)
        : url('images/placeholder.jpg');

    return response()->json([
        'success' => true,
        'data' => $category
    ]);
}


    public function getBrandsByCategory($id)
    {
        $brands = Brand::whereHas('products', function ($q) use ($id) {
            $q->where('category_id', $id);
        })->get();

        return response()->json([
            'success' => true,
            'data' => $brands
        ]);
    }

    // ==================== ADMIN ROUTES ====================
    public function adminIndex()
    {
        try {
            // L·∫•y T·∫§T C·∫¢ categories, kh√¥ng ph√¢n bi·ªát status
            $categories = Category::with('parent')
                ->orderBy('created_at', 'desc')
                ->get();

            return response()->json([
                'success' => true,
                'data' => $categories,
                'count' => $categories->count()
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c: ' . $e->getMessage()
            ], 500);
        }
    }

    public function getAllForDropdown()
    {
        try {
            $categories = Category::where('status', 1)
                ->orderBy('sort_order', 'asc')
                ->get(['id', 'name']);

            return response()->json([
                'success' => true,
                'data' => $categories
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c'
            ], 500);
        }
    }

    public function trash()
    {
        try {
            $categories = Category::onlyTrashed()
                ->with('parent')
                ->orderBy('created_at', 'desc')
                ->get();

            return response()->json([
                'success' => true,
                'data' => $categories
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c ƒë√£ x√≥a'
            ], 500);
        }
    }


public function store(Request $request)
{
    \Log::info('üì• Nh·∫≠n y√™u c·∫ßu t·∫°o danh m·ª•c:', $request->all());

    $validator = Validator::make($request->all(), [
        'name'        => 'required|string|max:255',
        'parent_id'   => [
            'nullable',
            'integer',
            function ($attribute, $value, $fail) {
                if (!is_null($value) && $value != 0) {
                    if (!\App\Models\Category::where('id', $value)->exists()) {
                        $fail('Danh m·ª•c cha kh√¥ng t·ªìn t·∫°i.');
                    }
                }
            },
        ],
        'description' => 'nullable|string',
        'sort_order'  => 'nullable|integer',
        'status'      => 'required|boolean',
        'image'       => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:4096',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'success' => false,
            'message' => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.',
            'errors'  => $validator->errors(),
        ], 422);
    }

    try {
        $categoryData = [
            'name'        => $request->name,
            'slug'        => Str::slug($request->name),
            'description' => $request->description ?? '',
            'status'      => $request->status ?? 1,
            'parent_id'   => $request->parent_id ?? 0,
            'sort_order'  => $request->sort_order ?? 0,
            'created_by'  => Auth::id() ?? 1,
        ];

        if ($request->hasFile('image')) {
            $file = $request->file('image');
            $filename = time() . '_' . Str::slug(pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME))
                        . '.' . $file->getClientOriginalExtension();
            $path = $file->storeAs('images/category', $filename, 'public');
            $categoryData['image'] = $path;
        }

        $category = Category::create($categoryData);

        // ‚úÖ Th√™m URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ frontend hi·ªÉn th·ªã ƒë∆∞·ª£c ·∫£nh
        $category->image = $category->image
            ? url('storage/' . $category->image)
            : url('images/placeholder.jpg');

        return response()->json([
            'success' => true,
            'data'    => $category,
            'message' => 'Th√™m danh m·ª•c th√†nh c√¥ng!',
        ], 201);
    } catch (\Exception $e) {
        \Log::error('‚ùå L·ªói khi t·∫°o danh m·ª•c:', ['error' => $e->getMessage()]);
        return response()->json([
            'success' => false,
            'message' => 'ƒê√£ x·∫£y ra l·ªói: ' . $e->getMessage(),
        ], 500);
    }
}


    
    public function destroy($id)
    {
        try {
            $category = Category::find($id);
            
            if (!$category) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
                ], 404);
            }

            // Ki·ªÉm tra n·∫øu category c√≥ s·∫£n ph·∫©m
            if ($category->products()->exists()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ c√≥ s·∫£n ph·∫©m ƒëang s·ª≠ d·ª•ng'
                ], 400);
            }

            // Ki·ªÉm tra n·∫øu category c√≥ danh m·ª•c con
            if ($category->children()->exists()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ c√≥ danh m·ª•c con'
                ], 400);
            }

            $category->delete();

            return response()->json([
                'success' => true,
                'message' => 'X√≥a danh m·ª•c th√†nh c√¥ng'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi x√≥a danh m·ª•c: ' . $e->getMessage()
            ], 500);
        }
    }

    public function status($id)
{
    try {
        $category = Category::find($id);
        
        if (!$category) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
            ], 404);
        }

        $category->update([
            'status' => $category->status == 1 ? 0 : 1,
            'updated_by' => 1,
        ]);

        return response()->json([
            'success' => true,
            'data' => $category,
            'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng'
        ]);
    } catch (\Exception $e) {
        return response()->json([
            'success' => false,
            'message' => 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: ' . $e->getMessage()
        ], 500);
    }
}


    public function restore($id)
    {
        try {
            $category = Category::onlyTrashed()->find($id);
            
            if (!$category) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
                ], 404);
            }

            $category->restore();

            return response()->json([
                'success' => true,
                'message' => 'Kh√¥i ph·ª•c danh m·ª•c th√†nh c√¥ng'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi kh√¥i ph·ª•c danh m·ª•c: ' . $e->getMessage()
            ], 500);
        }
    }

    public function forceDestroy($id)
    {
        try {
            $category = Category::onlyTrashed()->find($id);
            
            if (!$category) {
                return response()->json([
                    'success' => false,
                    'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
                ], 404);
            }

            $category->forceDelete();

            return response()->json([
                'success' => true,
                'message' => 'X√≥a vƒ©nh vi·ªÖn danh m·ª•c th√†nh c√¥ng'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'L·ªói khi x√≥a vƒ©nh vi·ªÖn danh m·ª•c: ' . $e->getMessage()
            ], 500);
        }
    }
     public function update(Request $request, $id)
{
    $category = Category::find($id);

    if (!$category) {
        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
        ], 404);
    }

    $validator = Validator::make($request->all(), [
        'name'        => 'required|string|max:255',
        'parent_id'   => 'nullable|integer|exists:categories,id',
        'description' => 'nullable|string',
        'sort_order'  => 'nullable|integer',
        'status'      => 'required|boolean',
        'image'       => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:4096',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'success' => false,
            'errors'  => $validator->errors(),
        ], 422);
    }

    try {
        $updateData = [
            'name'        => $request->name,
            'slug'        => Str::slug($request->name),
            'description' => $request->description,
            'parent_id'   => $request->parent_id ?? 0,
            'sort_order'  => $request->sort_order ?? 0,
            'status'      => $request->status,
            'updated_by'  => Auth::id() ?? 1,
        ];

        if ($request->hasFile('image')) {
            if ($category->image && Storage::disk('public')->exists($category->image)) {
                Storage::disk('public')->delete($category->image);
            }

            $file = $request->file('image');
            $filename = time() . '_' . Str::slug(pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME))
                        . '.' . $file->getClientOriginalExtension();
            $path = $file->storeAs('images/category', $filename, 'public');
            $updateData['image'] = $path;
        }

        $category->update($updateData);

        // ‚úÖ Th√™m URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ frontend load ·∫£nh ƒë√∫ng
        $category->image = $category->image
            ? url('storage/' . $category->image)
            : url('images/placeholder.jpg');

        return response()->json([
            'success' => true,
            'data'    => $category,
            'message' => 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng',
        ]);
    } catch (\Exception $e) {
        return response()->json([
            'success' => false,
            'message' => 'L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c: ' . $e->getMessage(),
        ], 500);
    }
}


}