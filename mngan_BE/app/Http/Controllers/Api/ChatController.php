<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Product;
use Illuminate\Support\Facades\Cache;
use OpenAI\Laravel\Facades\OpenAI;
use OpenAI\Exceptions\RateLimitException;

class ChatController extends Controller
{
    public function chat(Request $request)
    {
        $question = trim($request->input('message', ''));

        if (empty($question)) {
            return response()->json([
                'reply' => 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m kem nh√© üç¶',
            ]);
        }

        // ‚úÖ Cache c√¢u tr·∫£ l·ªùi trong 5 ph√∫t ƒë·ªÉ gi·∫£m g·ªçi API
        $cacheKey = 'chat_reply_' . md5($question);
        if (Cache::has($cacheKey)) {
            return response()->json([
                'reply' => Cache::get($cacheKey),
            ]);
        }

        // ‚úÖ L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ DB
        $products = Product::where('status', 1)
            ->select('name', 'price_root', 'price_sale', 'description')
            ->take(10)
            ->get();

        // ‚úÖ Gh√©p context g·ª≠i cho AI
        $context = "D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m kem trong c·ª≠a h√†ng:\n";
        foreach ($products as $p) {
            $context .= "- {$p->name}: gi√° g·ªëc {$p->price_root} VND, gi√° khuy·∫øn m√£i {$p->price_sale} VND. M√¥ t·∫£: {$p->description}\n";
        }

        try {
            // ‚úÖ G·ªçi API OpenAI
            $result = OpenAI::chat()->create([
                'model' => 'gpt-4o-mini',
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => 'B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n b√°n kem chuy√™n nghi·ªáp. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu.',
                    ],
                    ['role' => 'user', 'content' => $context],
                    ['role' => 'user', 'content' => "Kh√°ch h·ªèi: $question"],
                ],
            ]);

            $reply = $result->choices[0]->message->content ?? 'Xin l·ªói, t√¥i ch∆∞a r√µ √Ω b·∫°n.';

            // ‚úÖ L∆∞u cache k·∫øt qu·∫£
            Cache::put($cacheKey, $reply, now()->addMinutes(5));

            return response()->json(['reply' => $reply]);
        } 
        catch (RateLimitException $e) {
            return response()->json([
                'reply' => '‚è≥ H·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t nh√© üçß',
            ], 429);
        } 
        catch (\Exception $e) {
            \Log::error('Chat Error: ' . $e->getMessage());
            return response()->json([
                'reply' => '‚ö†Ô∏è Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.',
            ], 500);
        }
    }
}
