<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    public function index()
{
    $products = Product::with(['brand', 'category'])
        ->whereNull('deleted_at')
        ->get()
        ->map(function ($product) {
            $product->thumbnail = $product->thumbnail
                ? url('uploads/products/' . $product->thumbnail)
                : url('images/placeholder.jpg');
            return $product;
        });

    return response()->json([
        'success' => true,
        'data'    => $products
    ]);
}


public function all(Request $request)
{
    $perPage = $request->get('per_page', 5); // m·∫∑c ƒë·ªãnh 10 s·∫£n ph·∫©m / trang

    $products = Product::with(['brand', 'category'])
        ->whereNull('deleted_at')
        ->paginate($perPage);

    return response()->json([
        'success' => true,
        'data'    => $products->items(),
        'pagination' => [
            'total'        => $products->total(),
            'per_page'     => $products->perPage(),
            'current_page' => $products->currentPage(),
            'last_page'    => $products->lastPage(),
        ],
    ]);
}


    // L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
    public function show($id)
    {
        $product = Product::find($id);

        if (!$product || $product->deleted_at) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
            ], 404);
        }

        return response()->json([
            'success' => true,
            'data'    => $product
        ]);
    }

    public function store(Request $request)
{
    // √âp ki·ªÉu status v·ªÅ boolean
    $request->merge([
        'status' => filter_var($request->status, FILTER_VALIDATE_BOOLEAN),
    ]);

    $validated = $request->validate([
        'name'        => 'required|string|max:255',
        'slug'        => 'required|string|max:255|unique:ttmn_product,slug',
        'price_root'  => 'required|numeric|min:0',
        'price_sale'  => 'nullable|numeric|min:0',
        'description' => 'nullable|string',
        'detail'      => 'nullable|string',
        'thumbnail'   => 'nullable|image|mimes:jpg,jpeg,png,webp|max:2048',
        'category_id' => 'required|exists:ttmn_category,id',
        'brand_id'    => 'required|exists:ttmn_brand,id',
        'qty'         => 'required|integer|min:0',
        'status'      => 'required|boolean',
    ]);

    // ‚úÖ T·ª± t·∫°o slug n·∫øu ch∆∞a c√≥
    $validated['slug'] = $validated['slug'] ?? \Str::slug($validated['name']);

    // ‚úÖ Upload ·∫£nh
    if ($request->hasFile('thumbnail')) {
        $file = $request->file('thumbnail');
        $filename = time() . '_' . $file->getClientOriginalName();
        $file->move(public_path('uploads/products'), $filename);
        $validated['thumbnail'] = $filename;
    }

    // ‚úÖ G√°n ng∆∞·ªùi t·∫°o m·∫∑c ƒë·ªãnh
    $validated['created_by'] = 1; // ho·∫∑c auth()->id() n·∫øu c√≥ ƒëƒÉng nh·∫≠p admin

    $product = Product::create($validated);

    return response()->json([
        'success' => true,
        'message' => 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng',
        'data'    => $product
    ], 201);
}

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    public function update(Request $request, $id)
    {
        $product = Product::find($id);

        if (!$product || $product->deleted_at) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
            ], 404);
        }

        $validated = $request->validate([
            'name'        => 'sometimes|string|max:255',
            'slug'        => 'sometimes|string|max:255|unique:ttmn_product,slug,' . $id,
            'price_root'  => 'sometimes|numeric|min:0',
            'price_sale'  => 'sometimes|numeric|min:0',
            'description' => 'nullable|string',
            'detail'      => 'nullable|string',
            'thumbnail'   => 'nullable|string',
            'brand_id'    => 'sometimes|integer',
            'category_id' => 'sometimes|integer',
            'qty'         => 'sometimes|integer|min:0',
            'status'      => 'sometimes|boolean'
        ]);

        $product->update($validated);

        return response()->json([
            'success' => true,
            'message' => 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
            'data'    => $product
        ]);
    }

// üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã s·∫£n ph·∫©m
public function status($id)
{
    $product = Product::withTrashed()->find($id);

    if (!$product) {
        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m',
        ], 404);
    }

    // ƒê·∫£o tr·∫°ng th√°i 1 ‚Üî 0
    $product->status = $product->status == 1 ? 0 : 1;
    $product->save();

    return response()->json([
        'success' => true,
        'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
        'status' => $product->status,
    ]);
}


    // X√≥a m·ªÅm s·∫£n ph·∫©m
    public function destroy($id)
{
    $product = Product::find($id);

    if (!$product) {
        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
        ], 404);
    }

    $product->delete();

    return response()->json([
        'success' => true,
        'message' => 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng'
    ]);
}

// L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ x√≥a m·ªÅm (c√≥ quan h·ªá danh m·ª•c & th∆∞∆°ng hi·ªáu)
public function trash()
{
    $products = Product::onlyTrashed()
        ->with(['category:id,name', 'brand:id,name'])
        ->orderBy('id', 'desc')
        ->paginate(5); // n·∫øu mu·ªën c√≥ ph√¢n trang

    return response()->json([
        'success' => true,
        'data' => $products->items(),
        'pagination' => [
            'current_page' => $products->currentPage(),
            'last_page' => $products->lastPage(),
            'total' => $products->total(),
        ]
    ]);
}

    // Kh√¥i ph·ª•c s·∫£n ph·∫©m ƒë√£ x√≥a m·ªÅm
    public function restore($id)
    {
        $product = Product::withTrashed()->find($id);

        if (!$product) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
            ], 404);
        }

        $product->restore();

        return response()->json([
            'success' => true,
            'message' => 'Kh√¥i ph·ª•c s·∫£n ph·∫©m th√†nh c√¥ng',
            'data'    => $product
        ]);
    }

// X√≥a vƒ©nh vi·ªÖn s·∫£n ph·∫©m (ch·ªâ √°p d·ª•ng v·ªõi soft delete)
public function forceDelete($id)
{
    $product = Product::withTrashed()->find($id);

    if (!$product) {
        return response()->json([
            'success' => false,
            'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
        ], 404);
    }

    // X√≥a file ·∫£nh (n·∫øu c√≥)
    if ($product->image && file_exists(public_path('images/products/' . $product->image))) {
        unlink(public_path('images/products/' . $product->image));
    }

    $product->forceDelete();

    return response()->json([
        'success' => true,
        'message' => 'ƒê√£ x√≥a vƒ©nh vi·ªÖn s·∫£n ph·∫©m'
    ]);
}


    // ‚úÖ L·∫•y s·∫£n ph·∫©m theo category_id
    public function getByCategory($categoryId)
{
    $products = Product::with(['brand:id,name', 'category:id,name'])
        ->where('category_id', $categoryId)
        ->whereNull('deleted_at')
        ->get()
        ->map(function ($product) {
            $product->thumbnail = $product->thumbnail
                ? url('uploads/products/' . ltrim($product->thumbnail, '/'))
                : url('images/placeholder.jpg');
            return $product;
        });

    return response()->json([
        'success' => true,
        'data'    => $products
    ]);
}

    // Search S·∫£n Ph·∫©m
    public function search($keyword)
    {
    $products = Product::where('name', 'LIKE', "%$keyword%")
        ->whereNull('deleted_at')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $products
        ]);
    }

     // ‚úÖ S·∫£n ph·∫©m gi·∫£m gi√°
    // ‚úÖ S·∫£n ph·∫©m gi·∫£m gi√°
    public function sale()
    {
        $products = Product::whereColumn('price_sale', '<', 'price_root')
            ->whereNotNull('price_sale')
            ->where('price_sale', '>', 0)
            ->where('status', 1)
            ->whereNull('deleted_at')
            ->orderBy('updated_at', 'desc')
            ->take(8)
            ->get()
            ->map(function ($product) {
                $product->thumbnail = $product->thumbnail
                    ? url('uploads/products/' . ltrim($product->thumbnail, '/'))
                    : url('images/placeholder.jpg');
                return $product;
            });

        return response()->json([
            'success' => true,
            'data' => $products,
        ]);
    }

    // ‚úÖ S·∫£n ph·∫©m m·ªõi
    public function new()
    {
        $products = Product::where('status', 1)
            ->whereNull('deleted_at')
            ->orderBy('created_at', 'desc')
            ->take(8)
            ->get()
            ->map(function ($product) {
                $product->thumbnail = $product->thumbnail
                    ? url('uploads/products/' . ltrim($product->thumbnail, '/'))
                    : url('images/placeholder.jpg');
                return $product;
            });

        return response()->json([
            'success' => true,
            'data' => $products,
        ]);
    }

    // C·∫≠p nh·∫≠t t·ªìn kho // ADMIN
    public function updateStock(Request $request, $id)
{
    try {
        // üîç 1. Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        $product = Product::find($id);
        if (!$product) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.'
            ], 404);
        }

        // ‚úÖ 2. Validate ƒë·∫ßu v√†o
        $request->validate([
            'stock' => 'required|numeric|min:0',
        ], [
            'stock.required' => 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng.',
            'stock.numeric' => 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë.',
            'stock.min' => 'S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c √¢m.',
        ]);

        // üßÆ 3. C·∫≠p nh·∫≠t t·ªìn kho
        $product->qty = $request->input('stock');
        $product->save();

        // üöÄ 4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return response()->json([
            'success' => true,
            'message' => 'C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng.',
            'data' => [
                'id' => $product->id,
                'name' => $product->name,
                'qty' => $product->qty,
            ],
        ], 200);

    } catch (\Exception $e) {
        // ‚ö†Ô∏è 5. X·ª≠ l√Ω l·ªói b·∫•t ng·ªù
        return response()->json([
            'success' => false,
            'message' => 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t t·ªìn kho.',
            'error' => $e->getMessage(),
        ], 500);
    }
}





}