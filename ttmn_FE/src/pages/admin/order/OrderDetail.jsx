import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import axiosInstance from "../../../api/axios";

const OrderDetail = () => {
  const { id } = useParams();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [updating, setUpdating] = useState(false);

  // ‚úÖ Fetch d·ªØ li·ªáu chi ti·∫øt ƒë∆°n h√†ng
  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const res = await axiosInstance.get(`/orders/${id}`);
        if (res.data.success) {
          setOrder(res.data.order);
        } else {
          setError(res.data.message || "Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng.");
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng:", err);
        setError("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server.");
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [id]);

  // ‚úÖ Danh s√°ch tr·∫°ng th√°i
  const statusOptions = [
    { value: 0, label: "üïì Ch·ªù x√°c nh·∫≠n" },
    { value: 1, label: "üöö V·∫≠n chuy·ªÉn" },
    { value: 2, label: "üì¶ Ch·ªù giao h√†ng" },
    { value: 3, label: "‚úÖ Ho√†n th√†nh" },
    { value: 4, label: "‚ùå ƒê√£ h·ªßy" },
  ];

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
  const handleStatusChange = async (newStatus) => {
    if (!order) return;
    if (newStatus === order.status) return;

    if (!window.confirm("X√°c nh·∫≠n thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng n√†y?")) return;

    try {
      setUpdating(true);
      await axiosInstance.put(`/orders/${order.id}/status`, { status: newStatus });
      setOrder((prev) => ({ ...prev, status: newStatus }));
      alert("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
    } finally {
      setUpdating(false);
    }
  };

  // ‚úÖ T√≠nh t·ªïng ti·ªÅn
  const calculateTotal = (details = []) =>
    details.reduce((total, item) => total + item.price_buy * item.qty, 0);

  if (loading)
    return <p className="loading-text">‚è≥ ƒêang t·∫£i chi ti·∫øt ƒë∆°n h√†ng...</p>;
  if (error)
    return <p className="error-text">{error}</p>;
  if (!order)
    return <p className="no-data-text">Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng.</p>;

  return (
    <div className="order-detail-container">
      {/* Header */}
      <div className="order-detail-header">
        <h1 className="order-detail-title">
          üßæ Chi ti·∫øt ƒë∆°n h√†ng <span className="order-id">#{order.id}</span>
        </h1>
        <Link to="/admin/order-list" className="back-link">
          ‚Üê Quay l·∫°i danh s√°ch
        </Link>
      </div>

      {/* Th√¥ng tin kh√°ch h√†ng */}
      <section className="section customer-info">
        <h2 className="section-title">üë§ Th√¥ng tin kh√°ch h√†ng</h2>
        <div>
          <p><strong>T√™n:</strong> {order.user?.name || "Kh√¥ng r√µ"}</p>
          <p><strong>Email:</strong> {order.user?.email || "Kh√¥ng c√≥"}</p>
          <p><strong>ƒêi·ªán tho·∫°i:</strong> {order.phone}</p>
          <p><strong>ƒê·ªãa ch·ªâ:</strong> {order.address}</p>
          {order.note && <p><strong>Ghi ch√∫:</strong> {order.note}</p>}
        </div>
      </section>

      {/* Th√¥ng tin ƒë∆°n h√†ng */}
      <section className="section order-info">
        <h2 className="section-title">üì¶ Th√¥ng tin ƒë∆°n h√†ng</h2>
        <div>
          <p>
            <strong>Tr·∫°ng th√°i: </strong>
            <select
              value={order.status}
              disabled={updating}
              onChange={(e) => handleStatusChange(Number(e.target.value))}
              className="status-dropdown"
            >
              {statusOptions.map((opt) => (
                <option key={opt.value} value={opt.value}>
                  {opt.label}
                </option>
              ))}
            </select>
          </p>
          <p>
            <strong>Ng√†y ƒë·∫∑t:</strong>{" "}
            {new Date(order.created_at).toLocaleString("vi-VN")}
          </p>
        </div>
      </section>

      {/* S·∫£n ph·∫©m trong ƒë∆°n */}
      <section className="section">
        <h2 className="section-title">üõçÔ∏è S·∫£n ph·∫©m trong ƒë∆°n</h2>
        {order.order_details?.length > 0 ? (
          <div className="table-container">
            <table className="products-table">
              <thead>
                <tr>
                  <th className="text-center">#</th>
                  <th className="text-center">·∫¢nh</th>
                  <th className="text-left">T√™n s·∫£n ph·∫©m</th>
                  <th className="text-right">Gi√°</th>
                  <th className="text-right">S·ªë l∆∞·ª£ng</th>
                  <th className="text-right">Th√†nh ti·ªÅn</th>
                </tr>
              </thead>
              <tbody>
                {order.order_details.map((detail, index) => (
                  <tr key={index}>
                    <td className="text-center">{index + 1}</td>
                    <td className="text-center">
                      {detail.product?.image_url ? (
                        <img
                          src={detail.product.image_url}
                          alt={detail.product?.name}
                          className="product-image"
                          onError={(e) => {
                            e.target.style.display = "none";
                            e.target.nextSibling.style.display = "flex";
                          }}
                        />
                      ) : (
                        <div className="image-placeholder">No Image</div>
                      )}
                    </td>
                    <td className="text-left">
                      {detail.product?.name || `SP #${detail.product_id}`}
                    </td>
                    <td className="text-right price-cell">
                      {Number(detail.price_buy).toLocaleString()}‚Ç´
                    </td>
                    <td className="text-right">{detail.qty}</td>
                    <td className="text-right price-cell">
                      {(detail.price_buy * detail.qty).toLocaleString()}‚Ç´
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="no-data-text">Kh√¥ng c√≥ s·∫£n ph·∫©m trong ƒë∆°n h√†ng.</p>
        )}
      </section>

      {/* T·ªïng ti·ªÅn */}
      <section className="order-total">
        <h3>
          T·ªïng c·ªông:{" "}
          <span className="total-amount">
            {calculateTotal(order.order_details).toLocaleString()}‚Ç´
          </span>
        </h3>
      </section>
    </div>
  );
};

export default OrderDetail;
