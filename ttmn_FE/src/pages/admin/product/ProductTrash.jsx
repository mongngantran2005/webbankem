import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { MdRestore, MdDeleteForever } from "react-icons/md";
import apiProduct from "../../../api/apiProduct";

function ProductTrash() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    fetchDeletedProducts();
  }, [currentPage]);

  // üß† L·∫•y danh s√°ch s·∫£n ph·∫©m trong th√πng r√°c
  const fetchDeletedProducts = async () => {
    setLoading(true);
    setError("");
    try {
      const res = await apiProduct.admin.getTrash(currentPage, 5);
      setProducts(Array.isArray(res.data) ? res.data : []);
      setTotalPages(res.pagination?.last_page || 1);
    } catch (error) {
      console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m ƒë√£ x√≥a:", error);
      setError(error.response?.data?.message || "L·ªói t·∫£i danh s√°ch");
    } finally {
      setLoading(false);
    }
  };

  // üîÑ Kh√¥i ph·ª•c s·∫£n ph·∫©m
  const handleRestore = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c s·∫£n ph·∫©m n√†y kh√¥ng?")) {
      try {
        const res = await apiProduct.admin.restore(id);
        if (res.success) {
          alert("‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!");
          fetchDeletedProducts();
        } else {
          alert("‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i: " + (res.message || "Kh√¥ng r√µ nguy√™n nh√¢n"));
        }
      } catch (err) {
        console.error("Restore error:", err);
        alert(err.response?.data?.message || "Kh√¥i ph·ª•c th·∫•t b·∫°i");
      }
    }
  };

  // üí• X√≥a vƒ©nh vi·ªÖn
  const handleForceDelete = async (id) => {
    if (
      !window.confirm(
        "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Vƒ®NH VI·ªÑN s·∫£n ph·∫©m n√†y?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
      )
    )
      return;
    try {
      const res = await apiProduct.admin.forceDelete(id);
      if (res.success) {
        alert("üßπ X√≥a vƒ©nh vi·ªÖn th√†nh c√¥ng!");
        fetchDeletedProducts();
      } else {
        alert(res.message || "X√≥a th·∫•t b·∫°i");
      }
    } catch (err) {
      console.error("Force delete error:", err);
      alert(err.response?.data?.message || "X√≥a th·∫•t b·∫°i");
    }
  };

  // üí∞ ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
  const formatPrice = (price) =>
    new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(price);

  // üñºÔ∏è L·∫•y URL ·∫£nh
  const getImageUrl = (imagePath) =>
    imagePath ? `http://127.0.0.1:8000/uploads/products/${imagePath}` : null;

  // üåÄ ƒêang t·∫£i
  if (loading)
    return (
      <div className="loading">
        <div className="loading-spinner"></div>
        ƒêang t·∫£i danh s√°ch s·∫£n ph·∫©m ƒë√£ x√≥a...
      </div>
    );

  // ‚ö†Ô∏è L·ªói
  if (error)
    return (
      <div className="error-container">
        <div className="error-message">
          <strong>L·ªói:</strong> {error}
        </div>
        <button onClick={fetchDeletedProducts} className="btn btn-primary">
          Th·ª≠ l·∫°i
        </button>
      </div>
    );

  // üß© Giao di·ªán ch√≠nh
  return (
    <div className="product-admin">
      <div className="product-header">
        <h1>üóëÔ∏è S·∫£n Ph·∫©m ƒê√£ X√≥a <span className="product-count">({products.length})</span></h1>
        <div className="header-actions">
          <Link to="/admin/product" className="btn btn-secondary">
            ‚Üê Quay l·∫°i danh s√°ch
          </Link>
          <button onClick={fetchDeletedProducts} className="btn btn-secondary">
            üîÑ L√†m m·ªõi
          </button>
        </div>
      </div>

      <div className="product-table-container">
        <table className="product-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>H√¨nh ·∫£nh</th>
              <th>T√™n s·∫£n ph·∫©m</th>
              <th>Danh m·ª•c</th>
              <th>Th∆∞∆°ng hi·ªáu</th>
              <th>Gi√° b√°n</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr key={product.id}>
                <td>{product.id}</td>
                <td>
                  <img
                    src={getImageUrl(product.thumbnail) || "http://127.0.0.1:8000/images/placeholder.jpg"}
                    alt={product.name}
                    className="product-image"
                    onError={(e) => (e.target.src = "http://127.0.0.1:8000/images/placeholder.jpg")}
                  />
                </td>
                <td>
                  <div className="product-name-main">{product.name}</div>
                  <div className="product-slug">{product.slug}</div>
                </td>
                <td>{product.category?.name || "-"}</td>
                <td>{product.brand?.name || "-"}</td>
                <td>{formatPrice(product.price_sale)}</td>
                <td>{product.qty}</td>
                <td className="actions">
                  <button
                    onClick={() => handleRestore(product.id)}
                    className="btn btn-restore"
                    title="Kh√¥i ph·ª•c"
                  >
                    <MdRestore />
                  </button>
                  <button
                    onClick={() => handleForceDelete(product.id)}
                    className="btn btn-force-delete"
                    title="X√≥a vƒ©nh vi·ªÖn"
                  >
                    <MdDeleteForever />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {products.length === 0 && (
          <div className="no-data">üß∫ Th√πng r√°c tr·ªëng</div>
        )}
      </div>

      {/* üî¢ Ph√¢n trang */}
      {totalPages > 1 && (
        <div className="pagination">
          <button
            className="btn btn-secondary"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(currentPage - 1)}
          >
            ‚Üê Tr∆∞·ªõc
          </button>
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button
              key={page}
              className={`btn ${currentPage === page ? "btn-primary" : "btn-secondary"}`}
              onClick={() => setCurrentPage(page)}
            >
              {page}
            </button>
          ))}
          <button
            className="btn btn-secondary"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(currentPage + 1)}
          >
            Sau ‚Üí
          </button>
        </div>
      )}
    </div>
  );
}

export default ProductTrash;
