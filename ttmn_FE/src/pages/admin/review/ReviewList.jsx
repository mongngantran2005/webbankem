import { useEffect, useState } from "react";
import axios from "axios";

export default function ReviewList() {
  const [reviews, setReviews] = useState([]);
  const [products, setProducts] = useState([]);
  const [filters, setFilters] = useState({
    product_id: "",
    rating: "",
    date_from: "",
    date_to: "",
    search: "",
  });
  const [replyContent, setReplyContent] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchProducts();
    fetchReviews();
  }, []);

  const fetchProducts = async () => {
    try {
      const res = await axios.get("http://127.0.0.1:8000/api/products/admin/all");
      setProducts(res.data.products || []);
    } catch (error) {
      console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", error);
    }
  };

  const fetchReviews = async () => {
    try {
      const params = Object.fromEntries(
        Object.entries(filters).filter(([_, v]) => v !== "")
      );
      const res = await axios.get("http://127.0.0.1:8000/api/reviews/admin/all", {
        params,
      });
      setReviews(res.data.reviews || []);
    } catch (error) {
      console.error("L·ªói t·∫£i ƒë√°nh gi√°:", error);
    }
  };

  const handleChange = (e) => {
    setFilters({ ...filters, [e.target.name]: e.target.value });
  };

  const handleReplyChange = (id, value) => {
    setReplyContent({ ...replyContent, [id]: value });
  };

  const handleSendReply = async (reviewId) => {
    const content = replyContent[reviewId]?.trim();
    if (!content) {
      alert("Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi!");
      return;
    }

    try {
      setLoading(true);
      const res = await axios.post(
        `http://127.0.0.1:8000/api/reviews/${reviewId}/reply`,
        {
          user_id: 1, // üëà T·∫°m th·ªùi c·ªë ƒë·ªãnh, c√≥ th·ªÉ l·∫•y t·ª´ auth sau
          content,
        }
      );

      alert(res.data.message || "Tr·∫£ l·ªùi th√†nh c√¥ng!");
      setReplyContent({ ...replyContent, [reviewId]: "" });
    } catch (error) {
      console.error("L·ªói khi g·ª≠i ph·∫£n h·ªìi:", error);
      alert("L·ªói khi g·ª≠i ph·∫£n h·ªìi!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="review-container">
      <h1 className="review-title">üìã Qu·∫£n l√Ω ƒë√°nh gi√° s·∫£n ph·∫©m</h1>

      {/* B·ªô l·ªçc */}
      <div className="review-filters">
        <select name="product_id" value={filters.product_id} onChange={handleChange}>
          <option value="">-- T·∫•t c·∫£ s·∫£n ph·∫©m --</option>
          {products.map((p) => (
            <option key={p.id} value={p.id}>
              {p.name}
            </option>
          ))}
        </select>

        <select name="rating" value={filters.rating} onChange={handleChange}>
          <option value="">-- T·∫•t c·∫£ sao --</option>
          {[5, 4, 3, 2, 1].map((r) => (
            <option key={r} value={r}>
              {r} ‚≠ê
            </option>
          ))}
        </select>

        <input type="date" name="date_from" value={filters.date_from} onChange={handleChange} />
        <input type="date" name="date_to" value={filters.date_to} onChange={handleChange} />
        <button onClick={fetchReviews}>L·ªçc</button>
      </div>

      {/* B·∫£ng ƒë√°nh gi√° */}
      <div className="review-table-container">
        <table className="review-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>S·∫£n ph·∫©m</th>
              <th>Ng∆∞·ªùi d√πng</th>
              <th>Sao</th>
              <th>Nh·∫≠n x√©t</th>
              <th>·∫¢nh</th>
              <th>Ng√†y</th>
              <th>Ph·∫£n h·ªìi</th>
            </tr>
          </thead>
          <tbody>
            {reviews.length > 0 ? (
              reviews.map((r) => (
                <tr key={r.id}>
                  <td>{r.id}</td>
                  <td>{r.product?.name}</td>
                  <td>{r.user?.name}</td>
                  <td className="rating">{r.rating} ‚≠ê</td>
                  <td>{r.comment}</td>
                  <td>
                    {r.images?.length > 0 ? (
                      <div className="review-images">
                        {r.images.map((img) => (
                          <img
                            key={img.id}
                            src={`http://127.0.0.1:8000/${img.image}`}
                            alt=""
                          />
                        ))}
                      </div>
                    ) : (
                      "‚Äî"
                    )}
                  </td>
                  <td>{new Date(r.created_at).toLocaleDateString("vi-VN")}</td>
                  <td>
                    <div className="reply-section">
                      <textarea
                        rows="2"
                        placeholder="Nh·∫≠p ph·∫£n h·ªìi..."
                        value={replyContent[r.id] || ""}
                        onChange={(e) => handleReplyChange(r.id, e.target.value)}
                      />
                      <button
                        onClick={() => handleSendReply(r.id)}
                        disabled={loading}
                      >
                        {loading ? "ƒêang g·ª≠i..." : "G·ª≠i"}
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="8" className="no-data">
                  Kh√¥ng c√≥ ƒë√°nh gi√° n√†o
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
